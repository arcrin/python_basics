Why Does Dependency Injection Come Up So Often?

1. Centralized Dependency Management:
    - In large systems, managing dependencies (e.g., shared resources, communication channels, and state managers) can become messy 
    if every component constructs or fetches its own dependencies.
    - DI provides a centralized mechanism for dependency creation and distribution.
    
2. Improved Testability:
    - Components designed with DI don't directly depend on concrete implementations. This makes it easy to swap real dependencies 
    with mocks or stubs in test.
    
3. Modularity and Reusability:
    - Decoupling components from their dependencies prompts modularity. Components can be reused or replaced without altering other 
    parts of the system.
    
4. Scalability:
    - As systems grow, hardcoding dependencies or manually passing them around becomes unmanageable. DI automates this process,
    reducing boilerplate and improving scalability.

5. Separation of Concerns:
    - By delegating the responsibility of dependency management to a DI container, components can focus on their specific responsibilities.
    

Why DI Could Be a Good Fit for Your Application

The application has several characteristics that make DI particularly beneficial:

1. Complex Dependency Graph: 
    - Your Application class initializes multiple components with interdependent communication channels. DI would simplify this process by 
    handling dependency wiring automatically.

2. Asynchronous Components:
    - Your use of trio and asynchronous consumers requires careful management of communication channels. DI can streamline this by ensuring
    components receive the correct channels without repetitive boilerplate code.

3. Event-Driven Architecture:
    - Components like ApplicationStateManager and event handlers depend on the SystemEventBus and other shared resources. DI can decouple 
    these components, making it easier to swap implementations or adjust configurations.

4. Testability:
    - Your application would benefit from being able to test inidividual components (e.g., NodeExecutor, LogProcessor) ini isolation. 
    DI enables injecting mock dependencies for precise control during tests.


Where DI Would Help in Your System
1.  Application Initialization:
    - Replace the long constructor of Application with a DI container that provides pre-wired dependencies:

            app = container.resolve(Application)

2. Event Handlers:
    - Use DI to inject required dependencies into handlers, decoupling them form ApplicationStateManager

3. Communication Modules:
    - Communication-related components (WSCommModule, MessageBroadcaster) can be injected with the required interfaces rather than bing instantiated directly.

4. Producers and Consumers:
    - Components like NodeExecutor, LogProcessor, and TCDataWSProcessor rely on communication channels. A DI container can manage these channels and ensure proper 
    injection.
    

Practical Steps to Implement DI in Your Application
1. Introduce a DI Library:
    - Use a library like injector for Python. It allows you to define bindings between abstractions (e.g., interfaces) and implementations (e.g., concrete classes).

2. Define a DI Container:
    - A DI container is a central place where all dependencies are registered.

    Example:

        from injector import Injector,  Module, singleton

        class AppModule(Module):
            def configure(self, binder):
                binder.bind(NodeExecutor, to=NodeExecutor)
                binder.bind(WSCommModule, to=WSCommModule)
                # Register other dependencies

3. Modify Components to Accept Dependencies:
    - Refactor components to receive dependencies via their constructor or properties from DI container.

        Example:

            class NodeExecutor:
                @inject
                def __init__(self, receive_channel, send_channel):
                    self._receive_channel = receive_channel
                    self._send_channel = send_channel 
                    
4. Initialize and Run the Application
    - Create the DI container and resolve the Application class with all dependencies wired automatically:

        injector = Injector([AppModule])
        app = injector.get(Application)
        trio.run(app.start)
        

Challenges of DI
1. Learning Curve:
    - Understanding and implementing DI requires some upfront investment, especially for developers new to the concept.

2. Perceived Overhead:
    - In small or simple applications, DI might feel like overkill.

3. Debugging Complexity:
    - When dependencies are resolved dynamically, it can be harder to trace issues during debugging.
    

Final Thoughts
In your application, DI would reduce boilerplate, improve modularity, and make the system easier to maintain and extend. 
While it might seem like additional complexity initially, it pays off as the system grows.


----------------------------------------------------------------------------------------------------------------------------------

Notes from Dependency Injection Principle, Practices, and Patterns.

Chapter 1

- Dependency Injection is a set of software design principles and patterns that enables you to develop loosely coupled code.
- PURE DI is the practice of applying DI without DI CONTAINER
- DI isn't the end goal - it is a means to an end. DI enables loose coupling, and loose coupling makes code more maintainable.
- When it comes to DI, the LISKOV SUBSTITUTION PRINCIPLE is one of the most important software design principles. It's this 
principle that enables us to address requirements that occur in the future, even if we can't foresee them today.

- Design patterns often occur in relation to DI:
    - Null Object
    - Decorator pattern
    - Composite pattern
    - Adaptor pattern

- A good example of DI application in physical world is "Socket and Plug" model. How interesting, this is how I imagined the automation system.

- Ideally, a new requirement should be only necessitate the addition of a new class, with no changes to other already-existing classes of the system.
This is commonly known as the  OPEN/CLOSE Principle.

- CONSTRUCTOR INJECTION is the act of statically defining the list of required DEPENDENCIES by specifying them as parameters to the class's constructor.

Benefits of DI:

Benefit	                |   Description	                                                            |   When is it valuable?
Late binding	        |   Services can be swapped with other services without recompiling code.   |   Valuable in standard software, but perhaps less so in enterprise applications where the runtime environment tends to be well defined.
Extensibility	        |   Code can be extended and reused in ways not explicitly planned for.	    |   Always valuable.
Parallel development	|   Code can be developed in parallel.	                                    |   Valuable in large, complex applications; not so much in small, simple applications.
Maintainability	        |   Classes with clearly defined responsibilities are easier to maintain.   |   Always valuable.
Testability	            |   Classes can be unit tested.	                                            |   Always valuable.

- LATE BINDING
- Extensibility
    - usually done by wrappers of decorators
- PARALLEL development
- MAINTAINABILITY
- TESTABILITY
    - An application is considered TESTABLE when it can be unit tested.
    - It is only possible to write unit tests when the unit in question can be properly isolated from its DEPENDENCIES.
    
- It's not even particularly difficult to implement DI. We program against interfaces, not concrete implementations. The only major obstacle is to figure 
out how to get hold of instances of those interfaces. DI surmounts this obstacle by injecting the DEPENDENCIES from the outside. CONSTRUCTOR INJECTION
is the preferred method of doing that.

VOLATILE DEPENDENCIES
- The DEPENDENCY introduces a requirement to set up and configure a runtime environment for the applications. It isn't so much the concrete types that
are volatile, but rather what they imply about the runtime environment. Databases are good examples of BCL types that are VOLATILE DEPENDENCIES, and 
relational databases are the archetypical example. If you don't hide a relational database behind a SEAM, you can never replace it by any other technology.
It also makes it hard to set up and run automated unit tests. (Even though the MSSQL Server client library is a technology contained in the BCL its usage 
implies a relational database.) Other out-of-process resources like message queues, web services, and even the filesystem fall into this category. The 
symptoms of this type of DEPENDENCY are lack of late binding and extensibility, as well as disabled TESTABILITY. 

- The DEPENDENCY doesn't yet exist, or is still in development.
- The DEPENDENCY isn't installed on all machines in the development organization. This may be the case for expensive third-party libraries or DEPENDENCIES 
that can't be installed on all operating systems. The most common symptom is disabled TESTABILITY.
- The DEPENDENCY contains nondeterministic behavior. This is particularly important in unit tests because all tests must be deterministic. Typical sources
of non-determinism are random numbers and algorithms that depends on the current data or time. This type of DEPENDENCIES destroys TESTABILITY.

VOLATILE DEPENDENCIES are the focal point of DI. It's for VOLATILE DEPENDENCIES rather than STABLE DEPENDENCIES that you introduce SEAMS into your application.
Again, this obligates you to compose them using DI.

A DI CONTAINER could be VOLATILE. Only the entry point should reference the DI CONTAINER.

DI Scope
By utilizing DI, developers give up Object Composition (creating instances of dependencies inside the consumer) and dependency life cycle management.
DI in three dimensions
- Object Composition
- Object Lifetime
- Interception
    - This is where extendability happens, most likely with wrappers and decorators.

Although DI started out as a series of patterns aimed at solving the problem of OBJECT COMPOSITION, the term has subsequently expanded to also cover 
OBJECT LIFETIME and INTERCEPTION. Today, we think of DI as encompassing all three in a consistent way.
OBJECT COMPOSITION tends to dominate the picture because, without flexible OBJECT COMPOSITION, there'd be no INTERCEPTION and not need to manage 
OBJECT LIFETIME. OBJECT COMPOSITION provides the foundation, and LIFETIME MANAGEMENT addresses some important side effects. But it's mainly when it 
comes to INTERCEPTION that you start to reap the benefits.

Conclusion
Dependency Injection is a means to an end, not a goal in itself. It's the best way to enable loose coupling, an important poart of maintainable code. 
The benefits you can reap from loose coupling aren't always immediately apparent, but they'll become visible over time,  as the complexity of a code 
base grows. An important point about loose coupling in relation to DI is that, in order to be effective, it should be everywhere in your code base.

A tightly coupled code base will eventually deteriorate into Spaghetti Code; where as well-designed, loosely coupled code base can stay maintainable.
It takes more than loose coupling to reach a truly supple design, but programming to interfaces is a prerequisite.

DI is nothing more than a collection of design principles and patterns. It's more about a way of thinking and designing code than it is about tools and 
techniques. The purpose of DI is to make code maintainable. Small code bases, like a classic Hello World example, are inherently maintainable because
of their size. This is why DI tends to look like over-engineering in simple examples. The larger the code base becomes, the more visible the benefits.

Summary of Chapter 1
- Dependency Injection is a set of software design principles and patterns that enables loosely coupled code. Loose coupling makes code more maintainable.
- When you have a loosely coupled infrastructure in place, it can be used by anyone and adapted to changing needs and unanticipated requirements without
having to make large changes to the application's code base and its infrastructure.
- Troubleshooting tends to become less taxing because the scope of likely culprits narrows.
- DI enables late binding, which is the ability to replace classes or modules with different ones without the need for te original code to be recompiled. 
- DI makes it easier for code to be extended and reused in ways not explicitly planned for, similar to the way you have flexibility when working with 
electrical plugs and sockets.
- DI simplifies parallel development on the same code base because the Separation of Concerns allows each team member or even entire teams to work more
easily on isolated parts.
- DI makes software more TESTABLE because you can replace DEPENDENCIES with test implementations when writing unit tests.
- When you practice DI, collaborating classes should rely on infrastructure to provide the necessary services. You do this by letting your classes depend 
on interfaces, instead of concrete implementations.
- Classes shouldn't ask a third party for their DEPENDENCIES. This is an anti-pattern called SERVICE LOCATOR. Instead, classes should specify their required 
DEPENDENCIES STATICALLY using constructor paramenters, a practice called CONSTRUCTOR INJECTION
- DI CONTAINER is not a necessity.
- One of the most important software design principles that enables DI is the LISKOV SUBSTITUTION PRINCIPLE. It allows replacing one implementation of an
interface with another without breaking either the client or the implementation.
- DEPENDENCIES are considered STABLE in the case that they're already available, have deterministic behavior, don't require a setup runtime environment 
(such as a relational database), and don't need to be replaced, wrapped, or intercepted.
- DEPENDENCIES are considered VOLATILE when they are under development, aren't always available on all development machines, contain nondeterministic
behavior, or need to be replaced, wrapped, or intercepted.
- VOLATILE DEPENDENCIES are the focal point of DI. We inject VOLATILE DEPENDENCIES into a class's constructor.
- By removing control over DEPENDENCIES from their consumers, and moving that control into the application entry point, you gain the ability to apply